// ACTION f¸r Submit Buttondocument.getElementById('send-btn').addEventListener('click', function() {    // Hol Text aus Feld "message-input"    var inputVal = document.getElementById('message-input').value;    // When Input Feld nicht leer, zeige User Input an und rufe sendMessageToServer mit Input auf    if(inputVal.trim() !== "") {        displayMessage(inputVal, 'user');        sendMessageToServer(inputVal);    }        // Hide welcome message nach erstem Input des Users    document.getElementById('welcome-message').style.display = 'none';    });// ACTION f¸r Return Keydocument.getElementById('message-input').addEventListener('keypress', function(e) {    // Wurde Return gedr√ºckt (ohne dabei Shift zu dr√ºcken)    if (e.key === 'Enter' && !e.shiftKey) {        e.preventDefault(); // Default Action von Return (neue Zeile9 verhindern)                // Hol Text aus Feld "message-input"        var inputVal = document.getElementById('message-input').value;        // When Input Feld nicht leer, zeige User Input an und rufe sendMessageToServer mit Input auf        if(inputVal.trim() !== "") {            displayMessage(inputVal, 'user');            sendMessageToServer(inputVal);        }                // Hide welcome message nach erstem Input des Users        document.getElementById('welcome-message').style.display = 'none';              }    });// METHOD: sendMessageToServerfunction sendMessageToServer(message) {    // Display Typing Indicator    displayMessage(' ', 'typing');    // FLASK Route /get    fetch('/get', {        method: 'POST',        headers: {'Content-Type': 'application/json',},        body: JSON.stringify({ message: message })        })            .then(response => response.json())    .then(data => {        console.log('Success:', data);        removeTypingIndicator(); // Hide typing indicator        displayMessage(data.message, 'bot'); // GPT Response anzeigen    })        .catch((error) => {        console.error('Error:', error);        removeTypingIndicator(); // Hide typing indicator    });}// METHOD: displayMessagefunction displayMessage(message, sender) {        // Neues div f√ºr message container anlegen    var newMessageDiv = document.createElement('div');    newMessageDiv.className = `message-container ${sender}-message`; // Neue class f√ºr Input Nachricht    // Neue Image Elemente f√ºr User und GPT Icon anlegen    var iconSrc = sender === 'user' ? '/static/images/user-icon.png' : '/static/images/book-icon.png';    var icon = document.createElement('img');    icon.src = iconSrc;    icon.alt = `${sender}`;    icon.className = 'message-icon'; // Neue class f√ºr Icons        // Neues div f√ºr sender label und message text anlegen    var textContainer = document.createElement('div');    textContainer.className = 'text-container';        // Neues span Element f√ºr sender label anlegen    var senderLabel = document.createElement('span');    senderLabel.className = 'sender-label';    senderLabel.innerHTML = sender === 'user' ? 'Du<br>' : 'BOOK Recommender<br>';        // Line Breaks in HTML <br> Tags und Bold in <strong>, Backticks in <pre><code> und <h3> umwandeln    let htmlContent = message.replace(/\n\n/g, '<br><br>');    htmlContent = htmlContent.replace(/\n/g, '<br>');    htmlContent = htmlContent.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');    htmlContent = htmlContent.replace(/\`\`\`([\s\S]*?)\`\`\`/g, '<pre><code class="styled-code">$1</code></pre>');    htmlContent = htmlContent.replace(/\#\#\#\s*(.*?)(<br>|$)/g, '<h3>$1</h3>');            // Neues span Element f√ºr die Input Nachricht anlegen    var messageText = document.createElement('span');    messageText.innerHTML = htmlContent;            // sender label und message text an text container anh√§ngen    textContainer.appendChild(senderLabel);    textContainer.appendChild(messageText);         // icon und text container an message div anh√§ngen    newMessageDiv.appendChild(icon);    newMessageDiv.appendChild(textContainer);    // Neue Nachricht an "chat" Area Main anh‰ngen    document.getElementById('chat').appendChild(newMessageDiv);            // Typing Indicator anzeigen    if(sender === 'typing') {        newMessageDiv.id = 'typing-indicator';        var dots = createTypingDots();        messageText.appendChild(dots);    }            // Input Feld wieder leeren    document.getElementById('message-input').value = '';     // Zur neuen Nachricht scrollen    newMessageDiv.scrollIntoView({ behavior: 'smooth' });        }// METHOD: createTypingDotsfunction createTypingDots() {    var dotsContainer = document.createElement('span');    for(let i = 0; i < 3; i++) {        var dot = document.createElement('span');        dot.className = 'dot';        dotsContainer.appendChild(dot);    }    return dotsContainer;}// METHOD: removeTypingDotsfunction removeTypingIndicator() {    var typingIndicator = document.getElementById('typing-indicator');    if(typingIndicator) {        typingIndicator.remove();    }}// EVENT LISTENER f√ºr Resizing Textareadocument.getElementById('message-input').addEventListener('input', function() {    // Initial height der Textarea    this.style.height = '30px';        // Adjust the height based on the scrollHeight    var newHeight = this.scrollHeight - 13;    this.style.height = newHeight + 'px';});